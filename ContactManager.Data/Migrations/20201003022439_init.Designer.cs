// <auto-generated />
using ContactManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ContactManager.Data.Migrations
{
    [DbContext(typeof(ContactManagerDbContext))]
    [Migration("20201003022439_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ContactManager.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Bob",
                            LastName = "James"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Jerome",
                            LastName = "Porter"
                        });
                });

            modelBuilder.Entity("ContactManager.Models.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactForeignKey")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactForeignKey");

                    b.ToTable("EmailAddresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "bjames@kodak.com",
                            ContactForeignKey = 1,
                            Type = 2
                        },
                        new
                        {
                            Id = 2,
                            Address = "bjamespersonal@gmail.com",
                            ContactForeignKey = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            Address = "porterj@steaks.com",
                            ContactForeignKey = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = 4,
                            Address = "jeromeathome@gmail.com",
                            ContactForeignKey = 2,
                            Type = 1
                        });
                });

            modelBuilder.Entity("ContactManager.Models.Email", b =>
                {
                    b.HasOne("ContactManager.Models.Contact", "Contact")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("ContactForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
